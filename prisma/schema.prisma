// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lessons       Lesson[]
  resources     Resource[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Lesson {
  id              String           @id @default(cuid())
  name            String
  group           String
  type            String           // TYT or AYT
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  topics          Topic[]
  resourceLessons ResourceLesson[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("lessons")
}

model Topic {
  id              String          @id @default(cuid())
  order           Int
  name            String
  lessonId        String
  lesson          Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  resourceTopics  ResourceTopic[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("topics")
}

model Resource {
  id          String           @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessons     ResourceLesson[]
  topics      ResourceTopic[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("resources")
}

model ResourceLesson {
  id         String           @id @default(cuid())
  resourceId String
  lessonId   String
  resource   Resource         @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  lesson     Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  topics     ResourceTopic[]
  createdAt  DateTime         @default(now())

  @@unique([resourceId, lessonId])
  @@map("resource_lessons")
}

model ResourceTopic {
  id               String         @id @default(cuid())
  resourceId       String
  topicId          String
  resourceLessonId String
  questionCount    Int?           @default(0)
  resource         Resource       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  topic            Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  resourceLesson   ResourceLesson @relation(fields: [resourceLessonId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())

  @@unique([resourceId, topicId])
  @@map("resource_topics")
}