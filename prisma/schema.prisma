// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// Authentication Models (NextAuth)
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lessons       Lesson[]
  resources     Resource[]
  students      Student[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// Enums
// ============================================

enum StudentStatus {
  ACTIVE // Aktif öğrenci
  INACTIVE // Geçici olarak pasif
  GRADUATED // Mezun oldu
  SUSPENDED // Askıya alındı
}

// ============================================
// Core Domain Models
// ============================================

/**
 * Student Model - Öğrenci bilgileri
 * Her öğrenci bir öğretmene (User/Teacher) aittir
 */
model Student {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique // Zorunlu - login için gerekli
  password String // Zorunlu - Hashed password
  phone    String?

  // Veli bilgileri (opsiyonel)
  parentName  String?
  parentPhone String?

  // Öğretmen bilgisi
  teacherId String // userId → teacherId
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  // Kayıt durumu
  status     StudentStatus @default(ACTIVE)
  enrolledAt DateTime      @default(now())

  // Notlar
  notes String?

  // Relations
  assignments    StudentAssignment[]
  progress       StudentProgress[]
  topicSchedules StudentTopicSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId])
  @@index([status])
  @@index([teacherId, status])
  @@map("students")
}

/**
 * Lesson Model - Ders bilgileri
 * Hiyerarşi: GROUP → SUBJECT → LESSON → TOPICS
 * Örnek: "TYT Matematik" (group) → "Geometri" (subject) → "TYT Geometri" (lesson)
 */
model Lesson {
  id   String @id @default(cuid())
  name String // "TYT Geometri", "AYT Fizik"

  // Gruplama alanları (öğretmen tanımlı, serbest text)
  lessonGroup    String // "TYT Matematik", "AYT Fen"
  lessonSubject  String? // "Geometri", "Fizik", "Kimya" (opsiyonel)
  lessonExamType String  @default("TYT") // "TYT", "AYT", "YDS", etc.

  // UI için renk (otomatik atanıyor)
  color String @default("blue")

  // İlişkiler
  teacherId       String // userId → teacherId
  teacher         User             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  topics          LessonTopic[]
  resourceLessons ResourceLesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId])
  @@index([lessonExamType])
  @@index([teacherId, lessonExamType])
  @@index([teacherId, lessonGroup])
  @@map("lessons")
}

/**
 * LessonTopic Model - Ders konuları (müfredat)
 * Her ders için konular sıralı olarak tutulur
 */
model LessonTopic {
  id               String @id @default(cuid())
  lessonTopicName  String // name → lessonTopicName
  lessonTopicOrder Int // order → lessonTopicOrder

  // İlişkiler
  lessonId       String
  lesson         Lesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  resourceTopics ResourceTopic[]
  assignments    StudentAssignment[]
  progress       StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
  @@index([lessonId, lessonTopicOrder])
  @@map("lesson_topics")
}

/**
 * Resource Model - Kaynak/Test kitapları
 * Öğretmenin kullandığı test kitapları veya materyaller
 */
model Resource {
  id                  String  @id @default(cuid())
  resourceName        String // name → resourceName
  resourceDescription String? // description → resourceDescription

  // İlişkiler
  teacherId String // userId → teacherId
  teacher   User              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  lessons   ResourceLesson[]
  topics    ResourceTopic[]
  progress  StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId])
  @@map("resources")
}

/**
 * ResourceLesson Model - Kaynak-Ders ilişkisi
 * Bir kaynak birden fazla derse ait olabilir
 */
model ResourceLesson {
  id         String          @id @default(cuid())
  resourceId String
  lessonId   String
  resource   Resource        @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  lesson     Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  topics     ResourceTopic[]
  createdAt  DateTime        @default(now())

  @@unique([resourceId, lessonId])
  @@index([resourceId])
  @@index([lessonId])
  @@map("resource_lessons")
}

/**
 * ResourceTopic Model - Kaynak-Konu ilişkisi + Soru/Test sayıları
 * Her kaynakta her konu için kaç test ve kaç soru olduğunu tutar
 */
model ResourceTopic {
  id               String @id @default(cuid())
  resourceId       String
  topicId          String
  resourceLessonId String

  resourceTopicQuestionCount Int? @default(0) // Toplam soru sayısı
  resourceTopicTestCount     Int? @default(0) // Toplam test sayısı

  resource       Resource       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  topic          LessonTopic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  resourceLesson ResourceLesson @relation(fields: [resourceLessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([resourceId, topicId])
  @@index([resourceId])
  @@index([topicId])
  @@index([resourceLessonId])
  @@map("resource_topics")
}

/**
 * StudentAssignment Model - Öğrenciye atanan konular
 * Öğretmen öğrenciye hangi konuları, hangi kaynaklardan, kaç soru çözmesini atar
 */
model StudentAssignment {
  id                           String    @id @default(cuid())
  studentId                    String
  lessonTopicId                String // topicId → lessonTopicId
  assignedAt                   DateTime  @default(now())
  completed                    Boolean   @default(false)
  studentAssignmentCompletedAt DateTime?

  // Her kaynak için kaç soru atandığı: {resourceId: questionCount}
  studentAssignedResourceTopicQuestionCounts Json?

  student        Student                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonTopic    LessonTopic            @relation(fields: [lessonTopicId], references: [id], onDelete: Cascade)
  progress       StudentProgress[]
  topicSchedules StudentTopicSchedule[]

  @@unique([studentId, lessonTopicId])
  @@index([studentId])
  @@index([lessonTopicId])
  @@index([completed])
  @@index([studentId, completed])
  @@map("student_assignments")
}

/**
 * StudentProgress Model - Öğrenci ilerleme takibi
 * Öğrenci her gün çözdüğü soruları kaydeder
 * Her öğrenci × assignment × kaynak için ayrı progress kaydı
 */
model StudentProgress {
  id String @id @default(cuid())

  // İlişkiler
  studentId           String
  studentAssignmentId String // assignmentId → studentAssignmentId
  resourceId          String
  lessonTopicId       String // topicId → lessonTopicId

  // İlerleme sayıları
  studentProgressSolvedCount  Int @default(0) // Toplam çözülen
  studentProgressCorrectCount Int @default(0) // Doğru
  studentProgressWrongCount   Int @default(0) // Yanlış
  studentProgressEmptyCount   Int @default(0) // Boş

  // Zaman takibi
  studentProgressLastSolvedAt DateTime @default(now())

  student           Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentAssignment StudentAssignment @relation(fields: [studentAssignmentId], references: [id], onDelete: Cascade)
  resource          Resource          @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  lessonTopic       LessonTopic       @relation(fields: [lessonTopicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, studentAssignmentId, resourceId])
  @@index([studentId])
  @@index([studentAssignmentId])
  @@index([resourceId])
  @@index([lessonTopicId])
  @@index([studentId, lessonTopicId])
  @@map("student_progress")
}

/**
 * StudentTopicSchedule Model - Öğrenci günlük program
 * Öğrenciye atanan konuların zaman planlaması
 * Otomatik oluşturulur, öğretmen manuel düzenleyebilir
 */
model StudentTopicSchedule {
  id                  String @id @default(cuid())
  studentId           String
  studentAssignmentId String

  // Sıralama ve zamanlama
  scheduleOrder Int // Genel sıralama (1, 2, 3...)
  estimatedDays Int       @default(7) // Bu konu için kaç gün
  startDate     DateTime? // Otomatik hesaplanır, öğretmen değiştirebilir
  endDate       DateTime? // Otomatik hesaplanır, öğretmen değiştirebilir

  // Durum takibi
  isActive    Boolean   @default(false) // Şu an bu konu mu çalışılıyor
  isCompleted Boolean   @default(false)
  completedAt DateTime?

  // İlişkiler
  student           Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentAssignment StudentAssignment @relation(fields: [studentAssignmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, studentAssignmentId])
  @@index([studentId, scheduleOrder])
  @@index([studentId, isActive])
  @@index([studentId, isCompleted])
  @@index([startDate, endDate])
  @@map("student_topic_schedules")
}
